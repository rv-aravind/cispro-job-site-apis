Sure! Below is a **sample HTTP request** you can use to test the `createCompanyProfile` endpoint. Since this controller uses **`req.files`** (i.e., expects file uploads like `logo` and `coverImage`), you'll need to send a `multipart/form-data` request.

---

### âœ… Sample `POST` Request (via Postman or cURL)

#### **Request URL**:

```
POST http://localhost:3000/api/v1/employer-dashboard/company-profile
```

#### **Headers**:

```
Content-Type: multipart/form-data
Authorization: Bearer <your_access_token>
```

> Replace `<your_access_token>` with a real JWT if auth is required.

---

### ðŸ“¦ **Body (multipart/form-data)**

| Key              | Value (Type)       | Example / Notes                                    |
| ---------------- | ------------------ | -------------------------------------------------- |
| companyName      | Text               | `Tech Solutions`                                   |
| email            | Text               | `info@techsolutions.com`                           |
| phone            | Text               | `1234567890`                                       |
| website          | Text               | `https://techsolutions.com`                        |
| establishedSince | Text/Date          | `2010`                                             |
| teamSize         | Text/Number        | `50-100`                                           |
| categories       | Text or Array      | `["Software", "AI"]` or `Software` (single string) |
| allowInSearch    | Boolean (Text)     | `true` or `false`                                  |
| description      | Text               | `We build enterprise AI solutions.`                |
| socialMedia      | Text (JSON string) | `{"linkedin":"https://linkedin.com/company/tech"}` |
| location         | Text (JSON string) | `{"city":"San Francisco","country":"USA"}`         |
| industry         | Text               | `Information Technology`                           |
| companyType      | Text               | `Private`                                          |
| culture          | Text (JSON array)  | `["Innovative", "Diverse"]`                        |
| revenue          | Text               | `$1M - $5M`                                        |
| founders         | Text (JSON array)  | `[{"name":"Jane Doe","title":"CEO"}]`              |
| branches         | Text (JSON array)  | `[{"city":"NYC","employees":50}]`                  |
| isHiring         | Boolean (Text)     | `true` or `false`                                  |
| logo             | **File**           | Upload a logo image                                |
| coverImage       | **File**           | Upload a cover image                               |

---

### ðŸ§ª Example using Postman

1. Go to the **Body** tab â†’ select **form-data**
2. Add the fields above (use raw JSON strings where needed)
3. For `logo` and `coverImage`, change the type from "Text" to "File" and upload an image
4. Add the **Authorization** header if your route requires it

---

### ðŸ§µ Example cURL Request (for testing in terminal)

```bash
curl -X POST http://localhost:3000/api/v1/employer-dashboard/company-profile \
  -H "Authorization: Bearer <your_access_token>" \
  -F "companyName=Tech Solutions" \
  -F "email=info@techsolutions.com" \
  -F "phone=1234567890" \
  -F "website=https://techsolutions.com" \
  -F "establishedSince=2010" \
  -F "teamSize=50-100" \
  -F "categories=Software" \
  -F "allowInSearch=true" \
  -F "description=We build enterprise AI solutions." \
  -F 'socialMedia={"linkedin":"https://linkedin.com/company/tech"}' \
  -F 'location={"city":"San Francisco","country":"USA"}' \
  -F "industry=Information Technology" \
  -F "companyType=Private" \
  -F 'culture=["Innovative","Diverse"]' \
  -F "revenue=$1M - $5M" \
  -F 'founders=[{"name":"Jane Doe","title":"CEO"}]' \
  -F 'branches=[{"city":"NYC","employees":50}]' \
  -F "isHiring=true" \
  -F "logo=@./logo.png" \
  -F "coverImage=@./cover.jpg"
```

> Make sure `logo.png` and `cover.jpg` exist in your local directory before running this.

---

//Jobs Test:



### Sample Request

To test the `POST /api/v1/job-posts` endpoint, hereâ€™s a sample request using `multipart/form-data` (since the frontend form may send arrays like `specialisms` as strings).

#### Endpoint
```
POST /api/v1/job-posts
```

#### Headers
- **Authorization**: `Bearer <token>` (JWT token from `/auth/sign-in`)
- **Content-Type**: `multipart/form-data`

#### Request Body (Form Fields)
```json
{
  "title": "Senior Software Engineer",
  "description": "Responsible for developing and maintaining web applications.",
  "contactEmail": "hr@company.com",
  "contactUsername": "hr_team",
  "specialisms": "[\"Digital\", \"Technology\"]",
  "jobType": "Full-time",
  "offeredSalary": "$4500",
  "careerLevel": "Senior Level",
  "experience": "5-10 years",
  "gender": "No Preference",
  "industry": "Software Development",
  "qualification": "Bachelorâ€™s Degree",
  "applicationDeadline": "2025-08-15",
  "location": {
    "country": "Australia",
    "city": "Melbourne",
    "completeAddress": "329 Queensberry Street, North Melbourne VIC 3051, Australia",
    "coordinates": {
      "latitude": -37.8041,
      "longitude": 144.9496
    }
  }
}
```

#### Example Using cURL
```bash
curl -X POST http://localhost:5000/api/v1/job-posts \
  -H "Authorization: Bearer <your_jwt_token>" \
  -H "Content-Type: multipart/form-data" \
  -F "title=Senior Software Engineer" \
  -F "description=Responsible for developing and maintaining web applications." \
  -F "contactEmail=hr@company.com" \
  -F "contactUsername=hr_team" \
  -F "specialisms=[\"Digital\", \"Technology\"]" \
  -F "jobType=Full-time" \
  -F "offeredSalary=$4500" \
  -F "careerLevel=Senior Level" \
  -F "experience=5-10 years" \
  -F "gender=No Preference" \
  -F "industry=Software Development" \
  -F "qualification=Bachelorâ€™s Degree" \
  -F "applicationDeadline=2025-08-15" \
  -F "location={\"country\": \"Australia\", \"city\": \"Melbourne\", \"completeAddress\": \"329 Queensberry Street, North Melbourne VIC 3051, Australia\", \"coordinates\": {\"latitude\": -37.8041, \"longitude\": 144.9496}}"
```

#### Expected Success Response
```json
{
  "success": true,
  "message": "Job post created successfully",
  "jobPost": {
    "_id": "60d21b4667d0d8992e610c86",
    "employer": "60d21b4667d0d8992e610c84",
    "companyProfile": "60d21b4667d0d8992e610c85",
    "title": "Senior Software Engineer",
    "description": "Responsible for developing and maintaining web applications.",
    "contactEmail": "hr@company.com",
    "contactUsername": "hr_team",
    "specialisms": ["Digital", "Technology"],
    "jobType": "Full-time",
    "offeredSalary": "$4500",
    "careerLevel": "Senior Level",
    "experience": "5-10 years",
    "gender": "No Preference",
    "industry": "Software Development",
    "qualification": "Bachelorâ€™s Degree",
    "applicationDeadline": "2025-08-15T00:00:00.000Z",
    "location": {
      "country": "Australia",
      "city": "Melbourne",
      "completeAddress": "329 Queensberry Street, North Melbourne VIC 3051, Australia",
      "coordinates": {
        "latitude": -37.8041,
        "longitude": 144.9496
      }
    },
    "status": "Published",
    "createdAt": "2025-07-26T10:47:00.000Z",
    "updatedAt": "2025-07-26T10:47:00.000Z"
  }
}
```

#### Possible Error Responses
- **400 Bad Request** (missing fields):
  ```json
  {
    "success": false,
    "message": "Missing required fields: title, description"
  }
  ```
- **404 Not Found** (no company profile):
  ```json
  {
    "success": false,
    "message": "Company profile not found. Please create a company profile first."
  }
  ```
- **400 Validation Error** (invalid email):
  ```json
  {
    "success": false,
    "message": "Validation failed",
    "errors": ["Please enter a valid email address"]
  }
  ```

---

### Notes
- **Integration with Company Profile**: The API requires the employer to have a company profile, ensuring job posts are linked to a valid company.
- **Frontend Alignment**: The `specialisms` field is handled as a JSON string or array to match the `react-select` componentâ€™s output.
- **Coordinates**: The frontendâ€™s map component (likely Google Maps or similar) should provide `latitude` and `longitude`. Ensure these are sent as numbers.
- **Extensibility**: You can add endpoints for updating, deleting, or listing job posts by extending `jobPost.routes.js` and `jobPost.controller.js`.

This implementation provides a secure, validated, and professional backend API for your job posting form. Let me know if you need additional endpoints (e.g., update, delete) or help integrating with Next.js!